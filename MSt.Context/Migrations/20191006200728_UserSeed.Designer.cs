// <auto-generated />
using System;
using MSt.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MSt.Context.Migrations
{
    [DbContext(typeof(MusicStoreDbContext))]
    [Migration("20191006200728_UserSeed")]
    partial class UserSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MSt.Data.Entity.Claim", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Claims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Claim");
                });

            modelBuilder.Entity("MSt.Data.Entity.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("e06f16e2-1af4-4d62-9790-ceb7b705298f"),
                            IsDeleted = false,
                            Name = "artist"
                        });
                });

            modelBuilder.Entity("MSt.Data.Entity.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Guid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("e2d11f90-81ed-4eb8-a691-377396be8f6c"),
                            Email = "dj.music@yopmail.com",
                            IsDeleted = false,
                            Login = "dj.music@yopmail.com",
                            Password = "73fb1f36b321b11a7d9606d5b22e7701"
                        });
                });

            modelBuilder.Entity("MSt.Data.Entity.UserRole", b =>
                {
                    b.Property<Guid>("RoleGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleGuid", "UserGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleGuid = new Guid("e06f16e2-1af4-4d62-9790-ceb7b705298f"),
                            UserGuid = new Guid("e2d11f90-81ed-4eb8-a691-377396be8f6c")
                        });
                });

            modelBuilder.Entity("MSt.Data.Entity.RoleClaim", b =>
                {
                    b.HasBaseType("MSt.Data.Entity.Claim");

                    b.Property<Guid>("RoleGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RoleGuid");

                    b.HasDiscriminator().HasValue("RoleClaim");

                    b.HasData(
                        new
                        {
                            Guid = new Guid("2bddc6f2-78c2-4c39-b25a-f4bfa9933070"),
                            ClaimType = "music",
                            ClaimValue = "add",
                            RoleGuid = new Guid("e06f16e2-1af4-4d62-9790-ceb7b705298f")
                        });
                });

            modelBuilder.Entity("MSt.Data.Entity.UserClaim", b =>
                {
                    b.HasBaseType("MSt.Data.Entity.Claim");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("UserClaim");
                });

            modelBuilder.Entity("MSt.Data.Entity.UserRole", b =>
                {
                    b.HasOne("MSt.Data.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSt.Data.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MSt.Data.Entity.RoleClaim", b =>
                {
                    b.HasOne("MSt.Data.Entity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MSt.Data.Entity.UserClaim", b =>
                {
                    b.HasOne("MSt.Data.Entity.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
